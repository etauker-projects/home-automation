# version: '3'

services:

#   home-automation-api:
#     build:
#       context: .
#       dockerfile: ./config/main.dockerfile
#       labels:
#       - app=home-automation-api
#       # args:
#       #   NPM_TOKEN: ${NPM_TOKEN}
#     profiles: [ production ]
#     depends_on: [ mosquitto ]
#     restart: unless-stopped
#     container_name: home-automation-api
#     env_file:
#       - config/.env
#     networks:
#       - home-automation

#   home-automation-api-host-mode:
#     build:
#       context: .
#       dockerfile: ./config/main.dockerfile
#       labels:
#       - app=home-automation-api
#       # args:
#       #   NPM_TOKEN: ${NPM_TOKEN}
#     network_mode: host
#     profiles: [ ad-hoc ]
#     depends_on: [ mosquitto-host-mode ]
#     restart: unless-stopped
#     container_name: home-automation-api-host-mode
#     env_file:
#       - config/.env

  mosquitto:
    container_name: mqtt-broker
    image: eclipse-mosquitto:latest
    profiles: [ production ]
    network_mode: host
    restart: unless-stopped
    volumes:
      - ./data/mosquitto/config:/mosquitto/config
      - ./data/mosquitto/data:/mosquitto/data
      - ./data/mosquitto/log:/mosquitto/log
      - /etc/localtime:/etc/localtime:ro
    labels:
      - production

#   influxdb:
#     container_name: influxdb
#     image: influxdb:latest
#     profiles: [ production ]
#     # network_mode: host
#     restart: unless-stopped
#     volumes:
#       - ./data/influxdb/data:/var/lib/influxdb2
#       - ./data/influxdb/config:/etc/influxdb2
#       # - ./data/influxdb/scripts:/docker-entrypoint-initdb.d
#     ports:
#       - 8086:8086
#     networks:
#       - home-automation

  home-automation-backend:
    build:
      context: ./app/backend
      dockerfile: ./config/main.dockerfile
      labels:
      - app=home-automation-backend
    profiles: [ home-automation ]
    restart: unless-stopped
    container_name: home-automation-backend
    # env_file:
    #   - ./app/backend/config/.env
    environment:
      - LOGGER_LOG_LEVEL=INFO
      - MODE=production
      - PORT=9999
    network_mode: host

  home-automation-frontend:
    build:
      context: ./app/frontend
      dockerfile: ./config/main.dockerfile
      labels:
      - app=home-automation-frontend
    profiles: [ home-automation ]
    restart: unless-stopped
    container_name: home-automation-frontend
    # env_file:
    #   - ./app/frontend/config/.env
    ports:
      - '7001:80'

  home-assistant:
    container_name: home-assistant
    image: "ghcr.io/home-assistant/home-assistant:stable"
    profiles: [ production ]
    network_mode: host
    restart: unless-stopped
    privileged: true
    volumes:
      - ./data/hass:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
      - /mnt/synology-nas:/media
    environment:
      - TZ=Europe/Dublin
    # devices:
    #   - /dev/serial/by-id/usb-Nabu_Casa_Home_Assistant_Connect_ZBT-1_82d56869a0dced11bac7e62d62c613ac-if00-port0:/dev/ttyUSB0
    labels:
      - production

#   wyoming-piper:
#     container_name: wyoming-piper
#     image: rhasspy/wyoming-piper
#     ports:
#       - "10200:10200"
#     volumes:
#       - "./data/piper:/data"
#     command: [ "--voice", "en-gb-southern_english_female-low" ]
#     restart: unless-stopped
#     networks:
#       - home-automation

#   wyoming-whisper:
#     container_name: wyoming-whisper
#     image: rhasspy/wyoming-whisper
#     ports:
#       - "10300:10300"
#     volumes:
#       - ./data/whisper:/data
#     command: [ "--model", "small-int8", "--language", "en" ]
#     restart: unless-stopped
#     networks:
#       - home-automation

#   wyoming-openwakeword:
#     container_name: wyoming-openwakeword
#     image: rhasspy/wyoming-openwakeword
#     ports:
#       - "10400:10400"
#     volumes:
#       - "./data/openwakeword:/custom"
#     command: [ "--preload-model", "dobby", "--custom-model-dir", "/custom" ]
#     restart: unless-stopped
#     networks:
#       - home-automation

  zigbee2mqtt:
    container_name: zigbee2mqtt
    image: koenkk/zigbee2mqtt:latest
    profiles: [ production ]
    network_mode: host
    depends_on: [ mosquitto ]
    restart: unless-stopped
    # user: mosquitto:hass
    # group_add:
    #   - dialout
    # user: 1000:1000
    volumes:
      - ./data/zigbee2mqtt:/app/data
      - /run/udev:/run/udev:ro
    # ports:
    #   # Frontend port
    #   - 8080:8080
    environment:
      - TZ=Europe/Dublin
      - ZIGBEE2MQTT_CONFIG_PERMIT_JOIN=true
      - ZIGBEE2MQTT_CONFIG_MQTT_BASE_TOPIC=zigbee2mqtt
      - ZIGBEE2MQTT_CONFIG_MQTT_SERVER=mqtt://localhost:1883
      # - ZIGBEE2MQTT_CONFIG_MQTT_USER='!secret.yaml broker_user'
      # - ZIGBEE2MQTT_CONFIG_MQTT_PASSWORD='!secret.yaml broker_password'
      - ZIGBEE2MQTT_CONFIG_MQTT_REJECT_UNAUTHORIZED=true
      - ZIGBEE2MQTT_CONFIG_MQTT_KEEPALIVE=60
      - ZIGBEE2MQTT_CONFIG_MQTT_VERSION=5
      - ZIGBEE2MQTT_CONFIG_MQTT_INCLUDE_DEVICE_INFORMATION=true
      - ZIGBEE2MQTT_CONFIG_SERIAL_PORT=/dev/ttyUSB0
      - ZIGBEE2MQTT_CONFIG_FRONTEND_ENABLED=true
      - ZIGBEE2MQTT_CONFIG_FRONTEND_PORT=8080
      # - ZIGBEE2MQTT_CONFIG_FRONTEND_AUTH_TOKEN='!secret.yaml frontend_auth_token'
      - ZIGBEE2MQTT_CONFIG_HOMEASSISTANT_ENABLED=true
      - ZIGBEE2MQTT_CONFIG_HOMEASSISTANT_DISCOVERY_TOPIC=homeassistant
    devices:
      - /dev/serial/by-id/usb-Silicon_Labs_Sonoff_Zigbee_3.0_USB_Dongle_Plus_0001-if00-port0:/dev/ttyUSB0
    labels:
      - production

  govee2mqtt:
    container_name: govee2mqtt
    image: ghcr.io/wez/govee2mqtt:latest
    profiles: [ production ]
    network_mode: host  # host networking is required
    depends_on: [ mosquitto ]
    restart: unless-stopped
    volumes:
      - ./data/govee2mqtt/data:/app/data
    #   - /run/udev:/run/udev:ro
    env_file:
      - ./data/govee2mqtt/config/.env
    # ports:
    #   - 8056:8056
    environment:
      - TZ=Europe/Dublin
      - GOVEE_MQTT_HOST=localhost
      - GOVEE_MQTT_PORT=1883
      - GOVEE_TEMPERATURE_SCALE=C # C for Celsius or F for Fahrenheit
      - RUST_LOG_STYLE=always # Always use colorized output
      # - RUST_LOG=govee=trace # Enable for debug mode
    labels:
      - production

  # matter-server:
  #   image: ghcr.io/home-assistant-libs/python-matter-server:stable
  #   container_name: matter-server
  #   restart: unless-stopped
  #   profiles: [ development ]
  #   network_mode: host
  #   security_opt:
  #     # Needed for Bluetooth via dbus
  #     - apparmor:unconfined
  #   volumes:
  #     # Create an .env file that sets the USERDIR environment variable.
  #     - ./data/matter-server/data:/data/
  #     # Required for Bluetooth via D-Bus
  #     - /run/dbus:/run/dbus:ro
  #   # If you adjust command line, make sure to pass the default CMD arguments too:
  #   #command: --storage-path /data --paa-root-cert-dir /data/credentials --bluetooth-adapter 0
  #   labels:
  #     - development

  jellyfin:
    image: jellyfin/jellyfin:latest
    profiles: [ production ]
    container_name: jellyfin
    # user: uid:gid
    network_mode: host
    volumes:
      - ./data/jellyfin/config:/config
      - ./data/jellyfin/cache:/cache
      - type: bind
        source: /mnt/synology-nas/video/movies
        target: /movies
      - type: bind
        source: /mnt/synology-nas/video/tv-shows
        target: /tv-shows
      - type: bind
        source: /mnt/synology-nas/audio/music
        target: /music
      - type: bind
        source: /mnt/synology-nas/metadata/jellyfin
        target: /metadata
        read_only: false
      # # Optional - extra fonts to be used during transcoding with subtitle burn-in
      # - type: bind
      #   source: /path/to/fonts
      #   target: /usr/local/share/fonts/custom
      #   read_only: true
    restart: 'unless-stopped'
    # Optional - alternative address used for autodiscovery
    # environment:
    #   - JELLYFIN_PublishedServerUrl=http://example.com
    # Optional - may be necessary for docker healthcheck to pass if running in host network mode
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    environment:
      PORT: 8096

  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    restart: unless-stopped
    profiles: [ production ]
    network_mode: host
    # ports:
    #   - 3000:3000
    volumes:
      - ./data/homepage/config:/app/config
      - ./data/homepage/resources:/app/public/resources
      # - /var/run/docker.sock:/var/run/docker.sock # (optional) For docker integrations
    environment:
      HOMEPAGE_ALLOWED_HOSTS: 192.168.5.2,dash.home
      # PORT: 80
    labels:
      - production


  nginxproxymanager:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: nginxproxymanager
    restart: unless-stopped
    # network_mode: host
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    # networks:
    #   - proxy
    volumes:
      - ./data/nginx/data:/data
      - ./data/nginx/letsencrypt:/etc/letsencrypt

    # depends_on:
    #   - db

  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma
    restart: unless-stopped
    profiles: [ production ]
    network_mode: host
    # ports:
    #   - '3001:3001'
    volumes:
      - ./data/uptime-kuma:/app/data
    labels:
      - production

# # More info at https://github.com/pi-hole/docker-pi-hole/ and https://docs.pi-hole.net/
#   pihole:
#     container_name: pihole
#     image: pihole/pihole:latest
#     # network_mode: host
#     ports:
#       # DNS Ports
#       - "9053:53/tcp"
#       - "9053:53/udp"
#       # Default HTTP Port
#       - "9080:80/tcp"
#       # Default HTTPs Port. FTL will generate a self-signed certificate
#       - "9443:443/tcp"
#       # Uncomment the line below if you are using Pi-hole as your DHCP server
#       #- "67:67/udp"
#       # Uncomment the line below if you are using Pi-hole as your NTP server
#       #- "123:123/udp"
#     environment:
#       # Set the appropriate timezone for your location (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones), e.g:
#       TZ: 'Europe/Dublin'
#       # Set a password to access the web interface. Not setting one will result in a random password being assigned
#       FTLCONF_webserver_api_password: 'correct horse battery staple'
#       # If using Docker's default `bridge` network setting the dns listening mode should be set to 'all'
#       FTLCONF_dns_listeningMode: 'all'
#     # Volumes store your data between container upgrades
#     volumes:
#       # For persisting Pi-hole's databases and common configuration file
#       - './data/pihole:/etc/pihole'
#       # Uncomment the below if you have custom dnsmasq config files that you want to persist. Not needed for most starting fresh with Pi-hole v6. If you're upgrading from v5 you and have used this directory before, you should keep it enabled for the first v6 container start to allow for a complete migration. It can be removed afterwards. Needs environment variable FTLCONF_misc_etc_dnsmasq_d: 'true'
#       #- './etc-dnsmasq.d:/etc/dnsmasq.d'
#     cap_add:
#       # See https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
#       # Required if you are using Pi-hole as your DHCP server, else not needed
#       - NET_ADMIN
#       # Required if you are using Pi-hole as your NTP client to be able to set the host's system time
#       - SYS_TIME
#       # Optional, if Pi-hole should get some more processing time
#       - SYS_NICE
#     restart: unless-stopped

  # dns-server:
  #   container_name: dns-server
  #   hostname: dns-server
  #   image: technitium/dns-server:latest
  #   # For DHCP deployments, use "host" network mode and remove all the port mappings, including the ports array by commenting them
  #   network_mode: "host"
  #   # ports:
  #   #   - "5380:5380/tcp" #DNS web console (HTTP)
  #   #   # - "53443:53443/tcp" #DNS web console (HTTPS)
  #   #   - "53:53/udp" #DNS service
  #   #   - "53:53/tcp" #DNS service
  #   #   # - "853:853/udp" #DNS-over-QUIC service
  #   #   # - "853:853/tcp" #DNS-over-TLS service
  #   #   # - "443:443/udp" #DNS-over-HTTPS service (HTTP/3)
  #   #   # - "443:443/tcp" #DNS-over-HTTPS service (HTTP/1.1, HTTP/2)
  #   #   # - "80:80/tcp" #DNS-over-HTTP service (use with reverse proxy or certbot certificate renewal)
  #   #   # - "8053:8053/tcp" #DNS-over-HTTP service (use with reverse proxy)
  #   #   # - "67:67/udp" #DHCP service
  #   environment:

  #     # in the long term this should be set to dns.core.home
  #     - DNS_SERVER_DOMAIN=dns.automation.home #The primary domain name used by this DNS Server to identify itself.

  #     # - DNS_SERVER_ADMIN_PASSWORD=password #DNS web console admin user password.
  #     # - DNS_SERVER_ADMIN_PASSWORD_FILE=password.txt #The path to a file that contains a plain text password for the DNS web console admin user.
  #     # - DNS_SERVER_PREFER_IPV6=false #DNS Server will use IPv6 for querying whenever possible with this option enabled.
  #     # - DNS_SERVER_WEB_SERVICE_LOCAL_ADDRESSES=172.17.0.1,127.0.0.1 #Comma separated list of network interface IP addresses that you want the web service to listen on for requests. The "172.17.0.1" address is the built-in Docker bridge. The "[::]" is the default value if not specified. Note! This must be used only with "host" network mode.
  #     # - DNS_SERVER_WEB_SERVICE_HTTP_PORT=5380 #The TCP port number for the DNS web console over HTTP protocol.
  #     # - DNS_SERVER_WEB_SERVICE_HTTPS_PORT=53443 #The TCP port number for the DNS web console over HTTPS protocol.
  #     # - DNS_SERVER_WEB_SERVICE_ENABLE_HTTPS=false #Enables HTTPS for the DNS web console.
  #     # - DNS_SERVER_WEB_SERVICE_USE_SELF_SIGNED_CERT=false #Enables self signed TLS certificate for the DNS web console.
  #     # - DNS_SERVER_OPTIONAL_PROTOCOL_DNS_OVER_HTTP=false #Enables DNS server optional protocol DNS-over-HTTP on TCP port 8053 to be used with a TLS terminating reverse proxy like nginx.
  #     # - DNS_SERVER_RECURSION=AllowOnlyForPrivateNetworks #Recursion options: Allow, Deny, AllowOnlyForPrivateNetworks, UseSpecifiedNetworkACL.
  #     # - DNS_SERVER_RECURSION_NETWORK_ACL=192.168.10.0/24, !192.168.10.2 #Comma separated list of IP addresses or network addresses to allow access. Add ! character at the start to deny access, e.g. !192.168.10.0/24 will deny entire subnet. The ACL is processed in the same order its listed. If no networks match, the default policy is to deny all except loopback. Valid only for `UseSpecifiedNetworkACL` recursion option.
  #     # - DNS_SERVER_RECURSION_DENIED_NETWORKS=1.1.1.0/24 #Comma separated list of IP addresses or network addresses to deny recursion. Valid only for `UseSpecifiedNetworkACL` recursion option. This option is obsolete and DNS_SERVER_RECURSION_NETWORK_ACL should be used instead.
  #     # - DNS_SERVER_RECURSION_ALLOWED_NETWORKS=127.0.0.1, 192.168.1.0/24 #Comma separated list of IP addresses or network addresses to allow recursion. Valid only for `UseSpecifiedNetworkACL` recursion option.  This option is obsolete and DNS_SERVER_RECURSION_NETWORK_ACL should be used instead.
  #     # - DNS_SERVER_ENABLE_BLOCKING=false #Sets the DNS server to block domain names using Blocked Zone and Block List Zone.
  #     # - DNS_SERVER_ALLOW_TXT_BLOCKING_REPORT=false #Specifies if the DNS Server should respond with TXT records containing a blocked domain report for TXT type requests.
  #     # - DNS_SERVER_BLOCK_LIST_URLS= #A comma separated list of block list URLs.
  #     # - DNS_SERVER_FORWARDERS=1.1.1.1, 8.8.8.8 #Comma separated list of forwarder addresses.
  #     # - DNS_SERVER_FORWARDER_PROTOCOL=Tcp #Forwarder protocol options: Udp, Tcp, Tls, Https, HttpsJson.
  #     # - DNS_SERVER_LOG_USING_LOCAL_TIME=true #Enable this option to use local time instead of UTC for logging.
  #   volumes:
  #     - ./data/dns:/etc/dns
  #   restart: unless-stopped
  #   # sysctls:
  #   #   - net.ipv4.ip_local_port_range=1024 65000

  hello:
    image: crccheck/hello-world
    container_name: hello
    # networks:
    #   - proxy
    network_mode: host
    environment:
      - PORT=8888

  # hello-host:
  #   image: crccheck/hello-world
  #   container_name: hello-host
  #   network_mode: host
  #   environment:
  #     - PORT=9999

  # db:
  #   # image: postgres:latest
  #   build:
  #     context: .
  #     dockerfile: ../postgres/config/main.dockerfile
  #     # labels:
  #     # - app=postgres
  #   environment:
  #     POSTGRES_USER: 'npm'
  #     POSTGRES_PASSWORD: 'npmpass'
  #     POSTGRES_DB: 'local_01'
  #   # env_file:
  #   #   - ../postgres/config/.env
  #   # volumes:
  #   #   - ./postgres:/var/lib/postgresql/data

  # otbr:
  #   image: openthread/otbr:latest
  #   container_name: otbr
  #   restart: unless-stopped
  #   profiles: [ development ]
  #   privileged: true
  #   # network_mode: host
  #   ports:
  #     - 3001:80
  #   volumes:
  #     - ./data/otbr/stage:/app/stage
  #     - ./data/otbr/build:/app/build
  #     # - /dev/ttyUSB1:/dev/ttyUSB0
  #   environment:
  #     HOMEPAGE_ALLOWED_HOSTS: gethomepage.dev # required, may need port. See gethomepage.dev/installation/#homepage_allowed_hosts
  #     WEB_GUI: 1
  #     OTBR_AGENT_OPTS: "-I wpan0"
  #     # NETWORK_MANAGER: 1
  #     # DHCPV6_PD: 1
  #   devices:
  #     - /dev/serial/by-id/usb-Nabu_Casa_Home_Assistant_Connect_ZBT-1_82d56869a0dced11bac7e62d62c613ac-if00-port0:/dev/ttyUSB0
  #   labels:
  #     - development
  #   sysctls:
  #     - net.ipv6.conf.all.disable_ipv6=0
  #     - net.ipv4.conf.all.forwarding=1
  #     - net.ipv6.conf.all.forwarding=1
  #   # radio-url: spinel+hdlc+uart:///dev/ttyACM0
  #   dns:
  #     - 127.0.0.1

# Network Name: thread-network
# Network Extended PAN ID: D37ABE78F27CCEF8
# PAN ID: 0xA73F
# Passphrase/Commissioner Credential: TMqNN0WnZednP5I9
# Network Key: 5374fd956b114d68a8851bce216ac3c9
# Channel: 15
# On-Mesh Prefix: fd11:22::


# docker run
  # --sysctl "net.ipv6.conf.all.disable_ipv6=0 net.ipv4.conf.all.forwarding=1 net.ipv6.conf.all.forwarding=1"
  # -p 8080:80
  # --dns=127.0.0.1 -it
  # --volume /dev/ttyACM0:/dev/ttyACM0
  # --privileged openthread/otbr
  # --radio-url spinel+hdlc+uart:///dev/ttyACM0

#   whoami:
#     image: "traefik/whoami"
#     container_name: whoami
#     profiles: [ ad-hoc ]
#     labels:
#       - "traefik.enable=true"
#       - "traefik.http.routers.whoami.rule=Host(`dev.etauker.ie`) && PathPrefix(`/test`)"
#       - "traefik.http.routers.whoami.entrypoints=web"
#       - "traefik.http.middlewares.strip-test-prefix.stripprefix.prefixes=/test"
#       - "traefik.http.routers.whoami.middlewares=strip-test-prefix@docker"
#       - "traefik.http.services.whoami.loadbalancer.server.port=80"
#     networks:
#       - reverse-proxy

#   grafana:
#     container_name: hass-grafana
#     image: "grafana/grafana-oss:latest"
#     profiles: [ production ]
#     # network_mode: host
#     restart: unless-stopped
#     # user: mosquitto:hass
#     user: 1003:1002
#     # group_add:
#     #   - dialout
#     volumes:
#       - ./data/grafana:/var/lib/grafana:rw
#     ports:
#       - 3000:3000
#     labels:
#       - "traefik.enable=true"
#       # - "traefik.http.routers.home-assistant.rule=Host(`dev.etauker.ie`) && (Path(`/auth/token`) || PathPrefix(`/home-assistant`) || HeadersRegexp(`Referer`, `https?://dev.etauker.ie/home-assistant.*`) || HeadersRegexp(`Referer`, `https?://dev.etauker.ie/lovelace.*`) || HeadersRegexp(`Referer`, `https?://dev.etauker.ie/auth/authorize.*`) || Path(`/api/websocket`))"
#       - "traefik.http.routers.grafana.rule=Host(`grafana.hass.etauker.ie`)"
#       - "traefik.http.routers.grafana.entrypoints=web"
#       # - "traefik.http.middlewares.strip-grafana-prefix.stripprefix.prefixes=/grafana"
#       # - "traefik.http.routers.grafana.middlewares=strip-grafana-prefix@docker"
#       - "traefik.http.services.grafana.loadbalancer.server.port=3000"
#     networks:
#       - home-automation
#       - reverse-proxy

#   # --user "$(id -u)" \

#   glances:
#     container_name: glances
#     image: nicolargo/glances:latest
#     profiles: [ production ]
#     restart: unless-stopped
#     pid: host
#     # user: root:root
#     # privileged: true
#     volumes:
#       # - ./data/glances/passwd:/root/.config/glances/glances.pwd
#       # - ./data/glances/glances.conf:/glances/conf/glances.conf
#       - ./data/glances/glances.conf:/etc/glances/glances.conf
#       - /var/run/docker.sock:/var/run/docker.sock:ro

#     ports:
#       - 61208:61208
#       - 61209:61209
#     environment:
#       - "GLANCES_OPT=-w --password"
#     secrets:
#       - source: glances_password
#         target: /root/.config/glances/glances.pwd
#     networks:
#       - home-automation
#       - reverse-proxy
#     labels:
#       - "traefik.enable=true"
#       - "traefik.http.routers.glances.rule=Host(`glances.etauker.ie`)"
#       - "traefik.http.routers.glances.entrypoints=web"
#       - "traefik.http.services.glances.loadbalancer.server.port=61208"
#       - "traefik.http.services.glances.loadbalancer.server.port=61209"

  # ollama:
  #   image: ollama/ollama
  #   container_name: ollama
  #   ports:
  #     - "11434:11434"
  #   volumes:
  #     - ollama_models:/models
  #   command: ["ollama", "serve"]


# volumes:
#   ollama_models:

# secrets:
#   glances_password:
#     file: ./data/glances/glances.pwd

networks:
  proxy:
    name: proxy
#   home-automation:
#     name: home-automation

#   reverse-proxy:
#     # driver: bridge
#     name: traefik
#     external: true

# volumes:
#     config:
